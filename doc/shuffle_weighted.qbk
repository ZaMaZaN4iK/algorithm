[/ File shuffle_weighted.qbk]

[section:shuffle_weighted shuffle_weighted]

[/license
Copyright (c) 2017 Alexander Zaitsev

Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
]

The header file 'shuffle_weighted.hpp' contains shuffle_weighted algorithm. There is range-based version.
The algorithms rearrange the elements randomly with weights, using random number generator. Algorithm is implemented according to Weighted Random Sampling (2005; Efraimidis, Spirakis) paper.

The routine `shuffle_weighted` takes a item sequence and a weight sequences.

The routines come in 2 forms; the first one takes two iterators to define the item range, one iterator to define the beginning of weight range and random generator. The second form takes range to define the item sequence, range to define weight sequence and random generator.


[heading interface]

There are two versions of algorithms:
1) takes three iterators and random generator.
2) takes two ranges and random generator.
``
template<typename RandomAccessIterator1, typename RandomAccessIterator2, typename UniformRandomBitGenerator>
void shuffle_weighted(RandomAccessIterator1 item_begin, RandomAccessIterator1 item_end, RandomAccessIterator2 weight_begin, UniformRandomBitGenerator&& g);
template<typename Range1, typename Range2, typename UniformRandomBitGenerator>
void shuffle_weighted(Range1& item_range, Range2& weight_range, UniformRandomBitGenerator&& g);
``


[heading Examples]

Given the containers:
std::vector<int> emp_vec, emp_order,
std::vector<int> one{1}, one_order{0},
std::vector<int> two{1,2}, two_order{1,0},
std::vector<int> vec{1, 2, 3, 4, 5},
std::vector<int> order{4, 2, 3, 1, 0}, then
``

shuffle_weighted(emp_vec, emp_order))  --> no changes
``

[heading Iterator Requirements]

`shuffle_weighted` works only on RandomAccess iterators. RandomAccess iterators required both for item and weight sequences.

[heading Complexity]

All of the variants of `shuffle_weighted` runs in ['O(NlogN)] time.

[heading Exception Safety]

All of the variants of `shuffle_weighted` takes their parameters by iterators or reference, and do not depend upon any global state. Therefore, all the routines in this file provide the strong exception guarantee.

[heading Notes]
* Algorithms based on Weighted Random Sampling (2005; Efraimidis, Spirakis)  http://utopia.duth.gr/~pefraimi/research/data/2007EncOfAlg.pdf

* If ItemSequence and WeightSequence sizes are not equal, behavior is undefined.

* `shuffle_weighted` works also on empty sequences.

[endsect]

[/ File shuffle_weighted.qbk
Copyright 2017 Alexander Zaitsev
Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt).
]
